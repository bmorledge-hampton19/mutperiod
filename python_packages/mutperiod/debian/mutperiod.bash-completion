#!/usr/bin/env bash
# AUTOMATCALLY GENERATED by `shtab`

_shtab_mutperiodpy_subparsers=('parseICGC' 'parseBed' 'mainPipeline' 'periodicityAnalysis' 'generateFigures' 'stratifyNucMap')

_shtab_mutperiodpy_option_strings=('-h' '--help')
_shtab_mutperiodpy_parseICGC_option_strings=('-h' '--help' '-g' '--genome-file' '-d' '-c' '--stratify-by-donors' '-m' '--stratify-by-Microsatellite' '-s' '--stratify-by-Mut-Sigs')
_shtab_mutperiodpy_parseBed_option_strings=('-h' '--help' '-g' '--genome-file' '-c' '--stratify-by-cohorts' '-m' '--stratify-by-Microsatellite' '-s' '--stratify-by-Mut-Sigs' '-1' '--only-sbs' '-i' '--include-indels')
_shtab_mutperiodpy_mainPipeline_option_strings=('-h' '--help' '--mutation-file-paths' '--nucleosome-maps' '-c' '--context-normalization' '-b' '--background' '-n' '--no-normalization' '-i' '--generate-background-immediately' '-s' '--singlenuc-radius' '-l' '--add-linker' '-g' '--nuc-group-radius')
_shtab_mutperiodpy_periodicityAnalysis_option_strings=('-h' '--help' '-o' '--output-file-path' '-e' '--use-expected-periodicity' '-a' '--align-strands' '--group-1' '--group-2')
_shtab_mutperiodpy_generateFigures_option_strings=('-h' '--help' '--rda-paths' '--tsv-paths' '-f' '--output-file' '-d' '--output-directory' '-r' '--remove-outliers' '-s' '--smooth-nuc-group' '-a' '--align-strands')
_shtab_mutperiodpy_stratifyNucMap_option_strings=('-h' '--help' '-n' '--base-nucleosome-map')

_shtab_mutperiodpy_parseICGC_pos_0_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_parseICGC__g_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_parseICGC___genome_file_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_parseBed_pos_0_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_parseBed__g_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_parseBed___genome_file_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_mainPipeline___mutation_file_paths_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_mainPipeline__b_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_mainPipeline___background_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_periodicityAnalysis_pos_0_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_periodicityAnalysis__o_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_periodicityAnalysis___output_file_path_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_periodicityAnalysis___group_1_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_periodicityAnalysis___group_2_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_generateFigures___rda_paths_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_generateFigures___tsv_paths_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_generateFigures__f_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_generateFigures___output_file_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_generateFigures__d_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_generateFigures___output_directory_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_stratifyNucMap_pos_0_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_stratifyNucMap__n_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_stratifyNucMap___base_nucleosome_map_COMPGEN=_shtab_compgen_files

_shtab_mutperiodpy_pos_0_choices='parseICGC parseBed mainPipeline periodicityAnalysis generateFigures stratifyNucMap'
_shtab_mutperiodpy_mainPipeline__c_choices='1 2 3 4 5 6'
_shtab_mutperiodpy_mainPipeline___context_normalization_choices='1 2 3 4 5 6'

_shtab_mutperiodpy_pos_0_nargs=A...
_shtab_mutperiodpy__h_nargs=0
_shtab_mutperiodpy___help_nargs=0
_shtab_mutperiodpy_parseICGC_pos_0_nargs=*
_shtab_mutperiodpy_parseICGC__h_nargs=0
_shtab_mutperiodpy_parseICGC___help_nargs=0
_shtab_mutperiodpy_parseICGC__d_nargs=0
_shtab_mutperiodpy_parseICGC__c_nargs=0
_shtab_mutperiodpy_parseICGC___stratify_by_donors_nargs=0
_shtab_mutperiodpy_parseICGC__m_nargs=0
_shtab_mutperiodpy_parseICGC___stratify_by_Microsatellite_nargs=0
_shtab_mutperiodpy_parseICGC__s_nargs=0
_shtab_mutperiodpy_parseICGC___stratify_by_Mut_Sigs_nargs=0
_shtab_mutperiodpy_parseBed_pos_0_nargs=*
_shtab_mutperiodpy_parseBed__h_nargs=0
_shtab_mutperiodpy_parseBed___help_nargs=0
_shtab_mutperiodpy_parseBed__c_nargs=0
_shtab_mutperiodpy_parseBed___stratify_by_cohorts_nargs=0
_shtab_mutperiodpy_parseBed__m_nargs=0
_shtab_mutperiodpy_parseBed___stratify_by_Microsatellite_nargs=0
_shtab_mutperiodpy_parseBed__s_nargs=0
_shtab_mutperiodpy_parseBed___stratify_by_Mut_Sigs_nargs=0
_shtab_mutperiodpy_parseBed__1_nargs=0
_shtab_mutperiodpy_parseBed___only_sbs_nargs=0
_shtab_mutperiodpy_parseBed__i_nargs=0
_shtab_mutperiodpy_parseBed___include_indels_nargs=0
_shtab_mutperiodpy_mainPipeline__h_nargs=0
_shtab_mutperiodpy_mainPipeline___help_nargs=0
_shtab_mutperiodpy_mainPipeline___mutation_file_paths_nargs=*
_shtab_mutperiodpy_mainPipeline___nucleosome_maps_nargs=*
_shtab_mutperiodpy_mainPipeline__n_nargs=0
_shtab_mutperiodpy_mainPipeline___no_normalization_nargs=0
_shtab_mutperiodpy_mainPipeline__i_nargs=0
_shtab_mutperiodpy_mainPipeline___generate_background_immediately_nargs=0
_shtab_mutperiodpy_mainPipeline__s_nargs=0
_shtab_mutperiodpy_mainPipeline___singlenuc_radius_nargs=0
_shtab_mutperiodpy_mainPipeline__l_nargs=0
_shtab_mutperiodpy_mainPipeline___add_linker_nargs=0
_shtab_mutperiodpy_mainPipeline__g_nargs=0
_shtab_mutperiodpy_mainPipeline___nuc_group_radius_nargs=0
_shtab_mutperiodpy_periodicityAnalysis_pos_0_nargs=*
_shtab_mutperiodpy_periodicityAnalysis__h_nargs=0
_shtab_mutperiodpy_periodicityAnalysis___help_nargs=0
_shtab_mutperiodpy_periodicityAnalysis__e_nargs=0
_shtab_mutperiodpy_periodicityAnalysis___use_expected_periodicity_nargs=0
_shtab_mutperiodpy_periodicityAnalysis__a_nargs=0
_shtab_mutperiodpy_periodicityAnalysis___align_strands_nargs=0
_shtab_mutperiodpy_periodicityAnalysis___group_1_nargs=*
_shtab_mutperiodpy_periodicityAnalysis___group_2_nargs=*
_shtab_mutperiodpy_generateFigures__h_nargs=0
_shtab_mutperiodpy_generateFigures___help_nargs=0
_shtab_mutperiodpy_generateFigures___rda_paths_nargs=*
_shtab_mutperiodpy_generateFigures___tsv_paths_nargs=*
_shtab_mutperiodpy_generateFigures__r_nargs=0
_shtab_mutperiodpy_generateFigures___remove_outliers_nargs=0
_shtab_mutperiodpy_generateFigures__s_nargs=0
_shtab_mutperiodpy_generateFigures___smooth_nuc_group_nargs=0
_shtab_mutperiodpy_generateFigures__a_nargs=0
_shtab_mutperiodpy_generateFigures___align_strands_nargs=0
_shtab_mutperiodpy_stratifyNucMap_pos_0_nargs=*
_shtab_mutperiodpy_stratifyNucMap__h_nargs=0
_shtab_mutperiodpy_stratifyNucMap___help_nargs=0


# $1=COMP_WORDS[1]
_shtab_compgen_files() {
  compgen -f -- $1  # files
}

# $1=COMP_WORDS[1]
_shtab_compgen_dirs() {
  compgen -d -- $1  # recurse into subdirs
}

# $1=COMP_WORDS[1]
_shtab_replace_nonword() {
  echo "${1//[^[:word:]]/_}"
}

# This function is called for the initial parser and any
# subparsers that are found, to set default values.
_set_parser_defaults() {
  local subparsers_var="${prefix}_subparsers[@]"
  subparsers=${!subparsers_var}

  local current_option_strings_var="${prefix}_option_strings[@]"
  current_option_strings=${!current_option_strings_var}

  completed_positional_actions=0

  _set_new_action "pos_${completed_positional_actions}" true
}

# $1=action identifier
# $2=is positional action (boolean)
# This function is called when a new action is encountered
# to set all the identifiers for that action's parameters.
_set_new_action() {
  current_action="${prefix}_$(_shtab_replace_nonword $1)"

  local current_action_compgen_var=${current_action}_COMPGEN
  current_action_compgen="${!current_action_compgen_var}"

  local current_action_choices_var="${current_action}_choices"
  current_action_choices="${!current_action_choices_var}"

  local current_action_nargs_var="${current_action}_nargs"
  if [ -n "${!current_action_nargs_var}" ]; then
    current_action_nargs="${!current_action_nargs_var}"
  else
    current_action_nargs=1
  fi

  current_action_args_start_index=$(($word_index+1))
  
  current_action_is_positional=$2
}

# Notes:
# `COMPREPLY` contains what will be rendered after completion is triggered
# `completing_word` refers to the currently typed word to generate completions for
# `${!var}` is to evaluate the content of `var`
# and expand its content as a variable
#       hello="world"
#       x="hello"
#       ${!x} ->  ${hello} ->  "world"
_shtab_mutperiodpy() {
  local completing_word="${COMP_WORDS[COMP_CWORD]}"
  COMPREPLY=()

  prefix=_shtab_mutperiodpy
  word_index=0
  _set_parser_defaults
  word_index=1

  # determined what arguments are appropriate for the current state
  # of the arg parser
  while [ $word_index -ne $COMP_CWORD ]
  do

    local this_word="${COMP_WORDS[$word_index]}"

    # If we encounter a valid subcommand,
    # add it to the prefix and reset the current action
    if [[ -n $subparsers && " ${subparsers[@]} " =~ " ${this_word} " ]]; then
      prefix="${prefix}_$(_shtab_replace_nonword $this_word)"
      _set_parser_defaults
    fi

    # Check to see if a new action should be acquired,
    # either because an option string is recognized,
    # or because no more input is expected from the current action,
    # indicating that the next positional action can fill in here.
    if [[ " ${current_option_strings[@]} " =~ " ${this_word} " ]]; then
      _set_new_action $this_word false
    fi

    if [[ "$current_action_nargs" != "*" ]] && \
       [[ "$current_action_nargs" != "+" ]] && \
       [[ "$current_action_nargs" != *"..." ]] && \
       (( $word_index+1-$current_action_args_start_index >= $current_action_nargs )); then
      $current_action_is_positional && let "completed_positional_actions+=1"
      _set_new_action "pos_${completed_positional_actions}" true
    fi

    let "word_index+=1"
  done

  # Generate the completions

  # Uncomment below for debugging.
  # echo ""
  # echo "Current subparsers: ${subparsers[@]}"
  # echo "Current option strings: ${current_option_strings[@]}"
  # echo "Current action: ${current_action}"
  # echo "Current action nargs: ${current_action_nargs}"
  # echo "Current action completed arguments: $(( $word_index-$current_action_args_start_index ))"
  # echo "Current action choices: ${current_action_choices}"
  # echo "Current action compgen: ${current_action_compgen}"

  # If an optional argument has started, use option strings
  if [[ "${completing_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${current_option_strings[*]}" -- "${completing_word}") )
  # Otherwise, use choices and compgen
  else
    COMPREPLY=( $(compgen -W "${current_action_choices}" -- "${completing_word}"; \
      [ -n "${current_action_compgen}" ] \
      && "${current_action_compgen}" "${completing_word}") )
  fi

  return 0
}

complete -o filenames -F _shtab_mutperiodpy mutperiod
