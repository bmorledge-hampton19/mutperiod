# This script will, when given a bed formatted file with mutation entries,
# create a bed file with an expanded tri/pentanucleotide context around the mutation.

import os
from benbiohelpers.CustomErrors import InvalidPathError
from benbiohelpers.TkWrappers.TkinterDialog import TkinterDialog, Selections
from benbiohelpers.FileSystemHandling.BedToFasta import bedToFasta
from benbiohelpers.FileSystemHandling.FastaFileIterator import FastaFileIterator
from mutperiodpy.helper_scripts.UsefulFileSystemFunctions import Metadata, generateFilePath, DataTypeStr, getContext, getDataDirectory


# Expands the range of each mutation position in the original mutation file to encompass one extra base on either side.
def expandBedPositions(inputBedFilePath,bedExpansionFilePath,contextNum):
    "Expands the range of each mutation position in the original mutation file to encompass one extra base on either side."

    with open(bedExpansionFilePath,'w') as bedExpansionFile:
        with open(inputBedFilePath, 'r') as inputBedFile:

            print("Writing expanded mutation indicies to intermediate bed file...")
            for line in inputBedFile:

                # Get a list of all the arguments for a single mutation in the bed file.
                choppedUpLine = line.strip().split('\t')

                # Find the middle base of the sequence specified by the bed file.
                middleBaseNum = (float(choppedUpLine[1]) + float(choppedUpLine[2]) - 1) / 2

                # Expand the position of the mutation to create the desired context.
                choppedUpLine[1] = str(int(middleBaseNum - contextNum/2 + 0.5))
                choppedUpLine[2] = str(int(middleBaseNum + contextNum/2 - 0.5 + 1))

                # Write the results to the intermediate expansion file as long as it is not at the start of the chromosome.
                if float(choppedUpLine[1]) > -1: bedExpansionFile.write("\t".join(choppedUpLine)+"\n")
                else: print("Mutation at chromosome", choppedUpLine[0], "with expanded start pos", choppedUpLine[1],
                            "extends into invalid positions.  Skipping.")


# Uses the expanded reads fasta file to create a new bed file with the expanded mutational context.
def generateExpandedContext(inputBedFilePath,fastaReadsFilePath,expandedContextFilePath,contextNum):
    "Uses the expanded reads fasta file to create a new bed file with the expanded mutational context."

    print("Using fasta file to write expanded context to new bed file...")

    # For even context numbers, we'll need to offset the fasta positions back to half-base positions.
    if contextNum % 2 == 0: halfBaseOffset = 0.5
    else: halfBaseOffset = 0

    # Open the un-expanded bed file and the expanded fasta reads that will be combined to create the expanded context.
    with open(inputBedFilePath, 'r') as inputBedFile:
        with open(fastaReadsFilePath, 'r') as fastaReadsFile:
            with open(expandedContextFilePath, 'w') as expandedContextFile:

                # Work through the un-expanded bed file one mutation at a time.
                for fastaEntry in FastaFileIterator(fastaReadsFile):

                    # Find the un-expanded entry corresponding to this entry.
                    while True:

                        # Read in the next line
                        nextLine = inputBedFile.readline()

                        # If we reached the end of the file without finding a match, we have a problem...
                        if len(nextLine) == 0:
                            raise ValueError("Reached end of single base bed file without finding a match for:",fastaEntry.sequenceLocation)

                        # Split the next line on tab characters and check for a match with the current read in the fasta file.
                        choppedUpLine = nextLine.strip().split("\t")
                        if (str(int(fastaEntry.startPos)+int(contextNum/2)-halfBaseOffset) == choppedUpLine[1] and 
                            fastaEntry.chromosome == choppedUpLine[0] and fastaEntry.strand == choppedUpLine[5]): break

                    # Replace the mutation's previous context with the expanded context.
                    choppedUpLine[3] = fastaEntry.sequence

                    # Write the result to the new expanded context file.
                    expandedContextFile.write("\t".join(choppedUpLine)+"\n")


def expandContext(inputBedFilePaths, expansionContextNum):
    
    assert expansionContextNum in (3,5), "Unexpected expansion context: " + str(expansionContextNum)

    expandedContextFilePaths = list() # A list of paths to the output files generated by the function

    for inputBedFilePath in inputBedFilePaths:

        # Retrieve metadata
        metadata = Metadata(inputBedFilePath)

        # If necessary, adjust the context for files with even-length features.
        if getContext(inputBedFilePath, asInt = True) % 2 == 0:
            thisExpansionContextNum = expansionContextNum + 1
        else: thisExpansionContextNum = expansionContextNum

        # Make sure file names look valid.
        print("\nWorking in:",os.path.split(inputBedFilePath)[1])
        if not DataTypeStr.mutations in os.path.split(inputBedFilePath)[1]:
            raise InvalidPathError(inputBedFilePath, "Given mutation file does not have \"" + DataTypeStr.mutations + 
                                   "\" in the name.",
                                   postPathMessage = "Are you sure you inputted a file from the mutperiod pipeline?")
        
        # Make sure the context of the input bed file is less than the expansion context.
        if getContext(inputBedFilePath, asInt = True) >= thisExpansionContextNum:
            raise InvalidPathError(inputBedFilePath, "The given mutation file at does not have a lower context "
                                   "than the desired output context.", postPathMessage = "There is nothing to expand.")

        # Generate paths to intermediate data files.
        intermediateFilesDirectory = os.path.join(metadata.directory,"intermediate_files")
        
        bedExpansionFilePath = generateFilePath(directory = intermediateFilesDirectory, dataGroup = metadata.dataGroupName,
                                                dataType = "intermediate_expansion", fileExtension = ".bed")

        fastaReadsFilePath = generateFilePath(directory = intermediateFilesDirectory, dataGroup = metadata.dataGroupName,
                                              dataType = "expanded_reads", fileExtension = ".fa")

        # Generate a path to the final output file.
        expandedContextFilePath = generateFilePath(directory = metadata.directory, dataGroup = metadata.dataGroupName,
                                                  context = thisExpansionContextNum, dataType = DataTypeStr.mutations, fileExtension = ".bed")

        # Create a directory for intermediate files if it does not already exist...
        if not os.path.exists(intermediateFilesDirectory):
            os.mkdir(os.path.join(intermediateFilesDirectory))

        # Expand the nucleotide coordinates in the singlenuc context bed file as requested.
        expandBedPositions(inputBedFilePath,bedExpansionFilePath,thisExpansionContextNum)

        # Convert the expanded coordinates in the bed file to the referenced nucleotides in fasta format.
        print("Generating fasta file from expanded bed file...")
        bedToFasta(bedExpansionFilePath,metadata.genomeFilePath,fastaReadsFilePath)

        # Using the newly generated fasta file, create a new bed file with the expanded context.
        generateExpandedContext(inputBedFilePath,fastaReadsFilePath,expandedContextFilePath,thisExpansionContextNum)

        expandedContextFilePaths.append(expandedContextFilePath)

        # Delete the input file, which has the same mutation information, but a smaller context.
        print("Deleting old mutation context file...")
        os.remove(inputBedFilePath)

    return expandedContextFilePaths


def main():

    # Create the Tkinter dialog.
    dialog = TkinterDialog(workingDirectory=getDataDirectory())
    dialog.createMultipleFileSelector("Bed Mutation File:",0,"singlenuc_" + DataTypeStr.mutations + ".bed",("Bed Files",".bed"))
    dialog.createDropdown("Expansion Context",1,0,("Trinuc/Quadrunuc", "Pentanuc/Hexanuc"))

    # Run the UI
    dialog.mainloop()

    # If no input was received (i.e. the UI was terminated prematurely), then quit!
    if dialog.selections is None: quit()

    # Get the user's input from the dialog.
    selections: Selections = dialog.selections
    inputBedFilePaths = list(selections.getFilePathGroups())[0] # A list of paths to original bed mutation files
    expansionContext = list(selections.getDropdownSelections())[0] # What context the file should be expanded to.

    if expansionContext == "Trinuc/Quadrunuc":
        expansionContextNum = 3
    elif expansionContext == "Pentanuc/Hexanuc":
        expansionContextNum = 5
    else: raise ValueError("Matching strings is hard.")

    expandContext(inputBedFilePaths, expansionContextNum)

if __name__ == "__main__": main()