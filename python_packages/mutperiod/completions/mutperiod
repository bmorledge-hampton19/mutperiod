#!/usr/bin/env bash
# AUTOMATCALLY GENERATED by `shtab`

_shtab_mutperiodpy_options_='-h --help'
_shtab_mutperiodpy_commands_='generateFigures mainPipeline parseBed parseICGC periodicityAnalysis'

_shtab_mutperiodpy_generateFigures='-h --help --rda-paths --tsv-paths --output-file --output-directory --omit-outliers -s --smooth-nuc-group -a --align-strands -n --include-normalized -r --include-raw'
_shtab_mutperiodpy_mainPipeline='-h --help -c --context-normalization -b --background -n --no-normalization -s --singlenuc-radius -l --add-linker -g --nuc-group-radius'
_shtab_mutperiodpy_mainPipeline_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_parseBed='-h --help -g --genome-file -n --nuc-pos-file -c --stratify-by-cohorts -m --stratify-by-Microsatellite -s --stratify-by-Mut-Sigs'
_shtab_mutperiodpy_parseBed_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_parseICGC='-h --help -g --genome-file -n --nuc-pos-file -d -c --stratify-by-donors -m --stratify-by-Microsatellite -s --stratify-by-Mut-Sigs'
_shtab_mutperiodpy_parseICGC_COMPGEN=_shtab_compgen_files
_shtab_mutperiodpy_periodicityAnalysis='-h --help -o --output-file-path --group-1 --group-2'
_shtab_mutperiodpy_periodicityAnalysis_COMPGEN=_shtab_compgen_files


# $1=COMP_WORDS[1]
_shtab_compgen_files() {
  compgen -f -- $1  # files
  compgen -d -S '/' -- $1  # recurse into subdirs
}

# $1=COMP_WORDS[1]
_shtab_compgen_dirs() {
  compgen -d -S '/' -- $1  # recurse into subdirs
}

# $1=COMP_WORDS[1]
_shtab_replace_hyphen() {
  echo $1 | sed 's/-/_/g'
}

# $1=COMP_WORDS[1]
_shtab_replace_nonword() {
  echo "${1//[^[:word:]]/_}"
}

# $1=COMP_WORDS[1]
_shtab_mutperiodpy_compgen_root_() {
  local args_gen="_shtab_mutperiodpy_COMPGEN"
  case "$word" in
    -*) COMPREPLY=( $(compgen -W "$_shtab_mutperiodpy_options_" -- "$word"; [ -n "${!args_gen}" ] && ${!args_gen} "$word") ) ;;
    *) COMPREPLY=( $(compgen -W "$_shtab_mutperiodpy_commands_" -- "$word"; [ -n "${!args_gen}" ] && ${!args_gen} "$word") ) ;;
  esac
}

# $1=COMP_WORDS[1]
_shtab_mutperiodpy_compgen_command_() {
  local flags_list="_shtab_mutperiodpy_$(_shtab_replace_nonword $1)"
  local args_gen="${flags_list}_COMPGEN"
  COMPREPLY=( $(compgen -W "${!flags_list}" -- "$word"; [ -n "${!args_gen}" ] && ${!args_gen} "$word") )
}

# $1=COMP_WORDS[1]
# $2=COMP_WORDS[2]
_shtab_mutperiodpy_compgen_subcommand_() {
  local flags_list="_shtab_mutperiodpy_$(_shtab_replace_nonword "${1}_${2}")"
  local args_gen="${flags_list}_COMPGEN"
  [ -n "${!args_gen}" ] && local opts_more="$(${!args_gen} "$word")"
  local opts="${!flags_list}"
  if [ -z "$opts$opts_more" ]; then
    _shtab_mutperiodpy_compgen_command_ $1
  else
    COMPREPLY=( $(compgen -W "$opts" -- "$word"; [ -n "$opts_more" ] && echo "$opts_more") )
  fi
}

# Notes:
# `COMPREPLY` contains what will be rendered after completion is triggered
# `word` refers to the current typed word
# `${!var}` is to evaluate the content of `var`
# and expand its content as a variable
#       hello="world"
#       x="hello"
#       ${!x} ->  ${hello} ->  "world"
_shtab_mutperiodpy() {
  local word="${COMP_WORDS[COMP_CWORD]}"

  COMPREPLY=()

  if [ "${COMP_CWORD}" -eq 1 ]; then
    _shtab_mutperiodpy_compgen_root_ ${COMP_WORDS[1]}
  elif [ "${COMP_CWORD}" -eq 2 ]; then
    _shtab_mutperiodpy_compgen_command_ ${COMP_WORDS[1]}
  elif [ "${COMP_CWORD}" -ge 3 ]; then
    _shtab_mutperiodpy_compgen_subcommand_ ${COMP_WORDS[1]} ${COMP_WORDS[2]}
  fi

  return 0
}

complete -o nospace -F _shtab_mutperiodpy mutperiod
